#!/usr/bin/env node
'use strict';
/**
 * Module dependencies.
 */

var app = require( '../app' );
var fs  = require( 'fs' );

var serverConfig = global.serverConfig;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort( global.serverConfig.port || process.env.PORT || '3100' );
app.set( 'port', port );

/**
 * Create HTTP server.
 */

var server = (serverConfig.ssl)
    ? require( 'https' ).createServer(
        {
          key:  fs.readFileSync( serverConfig.ssl_key ),
          cert: fs.readFileSync( serverConfig.ssl_cert )
        } )
    : require( 'http' ).createServer();

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen( port );
server.on( 'error', onError );
/* required for https */
server.on( 'request', app );
server.on( 'listening', onListening );

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort( val ) {
  var port = parseInt( val, 10 );

  if( isNaN( port ) ) {
    // named pipe
    return val;
  }

  if( port >= 0 ) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError( error ) {
  if( error.syscall !== 'listen' ) {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch( error.code ) {
    case 'EACCES':
      global.logger.error( bind + ' requires elevated privileges' );
      console.error( bind + ' requires elevated privileges' );
      process.exit( 1 );
      break;
    case 'EADDRINUSE':
      global.logger.error( bind + ' is already in use' );
      console.error( bind + ' is already in use' );
      process.exit( 1 );
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  global.logger.info( 'Listening on ' + bind );
}
